<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace
	1.Mapper.xml配置文件的唯一标识
	2.需要与Mapper接口保持一致.
	  UserMapper.findAll();  通过方法映射Sql语句!!!-->
<mapper namespace="com.jt.mapper.DemoUserMapper">

    <!--查询标签必须有返回值
        resultType：直接反POJO对象的数据 单表查询
        resultMap：适用于关联查询的结果封装 一般采用第三方对象接收

        说明：resultType="包名.类名" resultType="com.jt.pojo.DemoUser"
        定义包别名：type-aliases-package: com.jt.pojo
        resultType= "DemoUser"  可以直接返回对象的名称
        程序解析时： 首相根据别名包的名称进行路径的拼接 com.jt.pojo.DemoUser-->
    <select id="findAll" resultType="DemoUser">
		select * from demo_user
	</select>

    <!--更新操作的标签就是为了方便程序员开发时使用,程序
	执行时没有任何的差别,所以可以混用
	<insert id="">
	</insert>-->

    <!--sql结束时不需要添加;号，在mysql数据库中执行;号-->
    <insert id="insertUser">
        insert into demo_user values (null,#{name},#{age},#{sex})
    </insert>

    <update id="updateUser">
        update demo_user set name=#{nowName},age=#{nowAge},sex=#{nowSex} where name =#{oldName}
    </update>

    <delete id="delUser">
        delete from demo_user where name=#{name}
    </delete>
</mapper>